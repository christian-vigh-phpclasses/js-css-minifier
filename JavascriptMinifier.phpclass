<?php
/**************************************************************************************************************

    NAME
        JavascriptMinifier.phpclass

    DESCRIPTION
        Minifier for javascript sources.

    AUTHOR
        Christian Vigh, 10/2015.

    HISTORY
    [Version : 1.0]    [Date : 2015/10/16]     [Author : CV]
        Initial version.

 **************************************************************************************************************/

require_once ( dirname ( __FILE__ ) . "/Minifier.phpclass" ) ;


/*==============================================================================================================

    JavascriptMinifier class -
        Minifier for javascript sources.

  ==============================================================================================================*/
class	JavascriptMinifier	extends  Minifier
   {
	// Token type for regular expressions
	const	TOKEN_REGEX		=  100 ;

	// Expected characters before a regular expression - Note that '' corresponds to type TOKEN_NONE
	// It appears as the last element since it needs to be tested only once
	private static	$SymbolsBeforeRegex	=  [ '(', '=', ';', '!', '>', '<', '' ] ;
	// List of symbols for which it is safer to prepend a newline
	private static  $ForceNewlineBefore	=  [] ;


	/*--------------------------------------------------------------------------------------------------------------

	   Constructor -
		Initializes the parent minifier class.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  __construct ( )
	   {
		static	$single_comments	= [ '//' ] ;
		static  $multi_comments		=  
		   [
			   [
				'start'		=>  '/*',
				'end'		=>  '*/',
				'nested'	=>  false 
			    ]
		    ] ;

		static	$quoted_strings		=
		   [
			   [
				'quote'		=>  '"',
				'escape'	=>  '\\',
				'continuation'	=>  "\\\n"
			    ],
			   [
				'quote'		=>  "'",
				'escape'	=>  '\\',
				'continuation'	=>  "\\\n"
			    ]
		    ] ;

		static  $tokens			=
		   [
			'===', '==', '=', '!==', '!=', '<=', '>=', '<', '>', '(', ')', '{', '}', '[', ']',
			'++', '--', '+=', '-=', '*=', '/=', '%=', '+', '-', '*', '/', '%', '~', '!',
			'.', ',', ';', '||', '&&', ':'
		    ] ;

		$this -> SetComments		( $single_comments, $multi_comments ) ;
		$this -> SetQuotedStrings	( $quoted_strings ) ;
		$this -> SetContinuation	( "\\" ) ;
		$this -> SetIdentifierRegex	( '[a-z_\$][a-z0-9_\$]*' ) ;
		$this -> SetTokens		( $tokens ) ;

		parent::__construct ( ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------

	   MinifyData -
		Process the input stream.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	protected function  MinifyData ( )
	   {
		$data			=  '' ;
		$offset			=  0 ;
		$token			=  null ;
		$token_type		=  self::TOKEN_NONE ;
		$last_token		=  '' ;
		$last_token_type	=  self::TOKEN_NONE ;
		$last_real_token	=  '' ;

		// Process every token of the input stream
		while ( $this -> GetNextToken ( $offset, $token, $token_type ) )
		   {
			// Check if we need to prepend a newline
			if  ( in_array ( $token, self::$ForceNewlineBefore ) )
				$token	=  "\n$token" ;

			switch ( $token )
			   {
				// Ignore newlines
				case	"\n" :
					break ;

				// Other token types
				default :
					// Append a space after each identifier
					if  ( $token_type  ==  self::TOKEN_IDENTIFIER )
					   {
						$token	.=  ' ' ;

						if  ( $last_token  ==  '}'  ||  $last_token  ==  ']'  ||  $last_token  ==  ')')
							$data .= "\n" ;
					    }
					// Detect regular expressions
					else if  ( $token  ==  '/'  &&  
							( in_array ( $last_token, self::$SymbolsBeforeRegex )  ||
							  $last_token  ==  'return' ) )
					   {
						$this -> ProcessRegex ( $this -> Content, $offset, $token, '/' ) ;
						$token_type	=  self::TOKEN_REGEX ;
					    }
					// '+' followed by '++' (or '++' followed by '+') : we need to keep a space between both
					else if  ( ( $last_token  ==  '+'   &&  $token  ==  '++' )  ||
						   ( $last_token  ==  '++'  &&  $token  ==  '+'  )  ||
						   ( $last_token  ==  '-'   &&  $token  ==  '--' )  ||
						   ( $last_token  ==  '--'  &&  $token  ==  '-'  ) )
					   {
						$data .= ' ' ;
					    }
					// Remove any previous trailing space if the current element is not numeric
					else if  ( $token_type  ==  self::TOKEN_ELEMENT  &&  ! is_numeric ( $token ) )
						$data    =  rtrim ( $data ) ;

					if  ( $last_real_token  ==  "\n"  &&  $last_token  !=  '}'  &&  $last_token  !=  ';' )
						$data .=  "\n" ;

					$data	.=  $token ;
			    }

			// Remember last non-space token
			if  ( $token_type  !=  self::TOKEN_SPACE  &&  $token_type  !=  self::TOKEN_NEWLINE )
			   {
				$last_token		=  trim ( $token ) ;
				$last_token_type	=  $token_type ;
			    }

			$last_real_token	=  $token ;
		    }

		return ( $data ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------

	   ProcessRegex -
		Captures a whole regular expression.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	protected function  ProcessRegex ( $content, &$offset, &$token, $stop_char )
	   {
		while  ( isset ( $content [ $offset ] )  &&  $content [ $offset ]  !=  $stop_char )
		   {
			if  ( $content [ $offset ]  ==  '\\' )
			   {
				if  ( ! isset ( $content [ ++ $offset ] ) )
					throw ( new MinifierException ( "Unterminated escape in regular expression at line #{$this -> CurrentLine}." ) ) ;

				$token	.=  '\\' ;
			    }

			$token .=  $content [ $offset ] ;
			$offset ++ ;
		    }

		if  ( ! isset ( $content [ $offset ] ) )
			throw ( new MinifierException ( "Unterminated regular expression at line #{$this -> CurrentLine}." ) ) ;

		$this -> CurrentLine	+=  substr_count ( $token, "\n" ) ;
		$token			.=  $stop_char ;
		$offset ++ ;
	    }
    }